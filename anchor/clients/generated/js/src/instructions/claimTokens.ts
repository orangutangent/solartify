/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit'
import { NFT_GIFTER_PROGRAM_ADDRESS } from '../programs'
import { expectAddress, getAccountMetaFactory, type ResolvedAccount } from '../shared'

export const CLAIM_TOKENS_DISCRIMINATOR = new Uint8Array([108, 216, 210, 231, 0, 212, 42, 64])

export function getClaimTokensDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLAIM_TOKENS_DISCRIMINATOR)
}

export type ClaimTokensInstruction<
  TProgram extends string = typeof NFT_GIFTER_PROGRAM_ADDRESS,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountUserTokenAccount extends string | IAccountMeta<string> = string,
  TAccountUserClaim extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountConfig extends string ? WritableAccount<TAccountConfig> : TAccountConfig,
      TAccountTokenMint extends string ? WritableAccount<TAccountTokenMint> : TAccountTokenMint,
      TAccountUserTokenAccount extends string ? WritableAccount<TAccountUserTokenAccount> : TAccountUserTokenAccount,
      TAccountUserClaim extends string ? WritableAccount<TAccountUserClaim> : TAccountUserClaim,
      TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >

export type ClaimTokensInstructionData = { discriminator: ReadonlyUint8Array }

export type ClaimTokensInstructionDataArgs = {}

export function getClaimTokensInstructionDataEncoder(): Encoder<ClaimTokensInstructionDataArgs> {
  return transformEncoder(getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]), (value) => ({
    ...value,
    discriminator: CLAIM_TOKENS_DISCRIMINATOR,
  }))
}

export function getClaimTokensInstructionDataDecoder(): Decoder<ClaimTokensInstructionData> {
  return getStructDecoder([['discriminator', fixDecoderSize(getBytesDecoder(), 8)]])
}

export function getClaimTokensInstructionDataCodec(): Codec<
  ClaimTokensInstructionDataArgs,
  ClaimTokensInstructionData
> {
  return combineCodec(getClaimTokensInstructionDataEncoder(), getClaimTokensInstructionDataDecoder())
}

export type ClaimTokensAsyncInput<
  TAccountUser extends string = string,
  TAccountConfig extends string = string,
  TAccountTokenMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountUserClaim extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>
  config: Address<TAccountConfig>
  tokenMint: Address<TAccountTokenMint>
  userTokenAccount?: Address<TAccountUserTokenAccount>
  userClaim?: Address<TAccountUserClaim>
  tokenProgram: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  systemProgram?: Address<TAccountSystemProgram>
}

export async function getClaimTokensInstructionAsync<
  TAccountUser extends string,
  TAccountConfig extends string,
  TAccountTokenMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountUserClaim extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof NFT_GIFTER_PROGRAM_ADDRESS,
>(
  input: ClaimTokensAsyncInput<
    TAccountUser,
    TAccountConfig,
    TAccountTokenMint,
    TAccountUserTokenAccount,
    TAccountUserClaim,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  ClaimTokensInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountConfig,
    TAccountTokenMint,
    TAccountUserTokenAccount,
    TAccountUserClaim,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? NFT_GIFTER_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    userClaim: { value: input.userClaim ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Resolve default values.
  if (!accounts.userTokenAccount.value) {
    accounts.userTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    })
  }
  if (!accounts.userClaim.value) {
    accounts.userClaim.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([99, 108, 97, 105, 109])),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    })
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.userClaim),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimTokensInstructionDataEncoder().encode({}),
  } as ClaimTokensInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountConfig,
    TAccountTokenMint,
    TAccountUserTokenAccount,
    TAccountUserClaim,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >

  return instruction
}

export type ClaimTokensInput<
  TAccountUser extends string = string,
  TAccountConfig extends string = string,
  TAccountTokenMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountUserClaim extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>
  config: Address<TAccountConfig>
  tokenMint: Address<TAccountTokenMint>
  userTokenAccount: Address<TAccountUserTokenAccount>
  userClaim: Address<TAccountUserClaim>
  tokenProgram: Address<TAccountTokenProgram>
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>
  systemProgram?: Address<TAccountSystemProgram>
}

export function getClaimTokensInstruction<
  TAccountUser extends string,
  TAccountConfig extends string,
  TAccountTokenMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountUserClaim extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof NFT_GIFTER_PROGRAM_ADDRESS,
>(
  input: ClaimTokensInput<
    TAccountUser,
    TAccountConfig,
    TAccountTokenMint,
    TAccountUserTokenAccount,
    TAccountUserClaim,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ClaimTokensInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountConfig,
  TAccountTokenMint,
  TAccountUserTokenAccount,
  TAccountUserClaim,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? NFT_GIFTER_PROGRAM_ADDRESS

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    userClaim: { value: input.userClaim ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  }
  const accounts = originalAccounts as Record<keyof typeof originalAccounts, ResolvedAccount>

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value = '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId')
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.userClaim),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getClaimTokensInstructionDataEncoder().encode({}),
  } as ClaimTokensInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountConfig,
    TAccountTokenMint,
    TAccountUserTokenAccount,
    TAccountUserClaim,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >

  return instruction
}

export type ParsedClaimTokensInstruction<
  TProgram extends string = typeof NFT_GIFTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>
  accounts: {
    user: TAccountMetas[0]
    config: TAccountMetas[1]
    tokenMint: TAccountMetas[2]
    userTokenAccount: TAccountMetas[3]
    userClaim: TAccountMetas[4]
    tokenProgram: TAccountMetas[5]
    associatedTokenProgram: TAccountMetas[6]
    systemProgram: TAccountMetas[7]
  }
  data: ClaimTokensInstructionData
}

export function parseClaimTokensInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(
  instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>,
): ParsedClaimTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts')
  }
  let accountIndex = 0
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!
    accountIndex += 1
    return accountMeta
  }
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      config: getNextAccount(),
      tokenMint: getNextAccount(),
      userTokenAccount: getNextAccount(),
      userClaim: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getClaimTokensInstructionDataDecoder().decode(instruction.data),
  }
}
