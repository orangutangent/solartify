/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { NFT_GIFTER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MINT_NFT_DISCRIMINATOR = new Uint8Array([
  211, 57, 6, 167, 15, 219, 35, 251,
]);

export function getMintNftDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MINT_NFT_DISCRIMINATOR);
}

export type MintNftInstruction<
  TProgram extends string = typeof NFT_GIFTER_PROGRAM_ADDRESS,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountUserTokenAccount extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountUserNftAccount extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      TAccountTokenMint extends string
        ? WritableAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountUserTokenAccount extends string
        ? WritableAccount<TAccountUserTokenAccount>
        : TAccountUserTokenAccount,
      TAccountNftMint extends string
        ? WritableAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountUserNftAccount extends string
        ? WritableAccount<TAccountUserNftAccount>
        : TAccountUserNftAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MintNftInstructionData = { discriminator: ReadonlyUint8Array };

export type MintNftInstructionDataArgs = {};

export function getMintNftInstructionDataEncoder(): Encoder<MintNftInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: MINT_NFT_DISCRIMINATOR })
  );
}

export function getMintNftInstructionDataDecoder(): Decoder<MintNftInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMintNftInstructionDataCodec(): Codec<
  MintNftInstructionDataArgs,
  MintNftInstructionData
> {
  return combineCodec(
    getMintNftInstructionDataEncoder(),
    getMintNftInstructionDataDecoder()
  );
}

export type MintNftAsyncInput<
  TAccountUser extends string = string,
  TAccountConfig extends string = string,
  TAccountTokenMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountNftMint extends string = string,
  TAccountUserNftAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  config: Address<TAccountConfig>;
  tokenMint: Address<TAccountTokenMint>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  nftMint: Address<TAccountNftMint>;
  userNftAccount?: Address<TAccountUserNftAccount>;
  tokenProgram: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getMintNftInstructionAsync<
  TAccountUser extends string,
  TAccountConfig extends string,
  TAccountTokenMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountNftMint extends string,
  TAccountUserNftAccount extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof NFT_GIFTER_PROGRAM_ADDRESS,
>(
  input: MintNftAsyncInput<
    TAccountUser,
    TAccountConfig,
    TAccountTokenMint,
    TAccountUserTokenAccount,
    TAccountNftMint,
    TAccountUserNftAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MintNftInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountConfig,
    TAccountTokenMint,
    TAccountUserTokenAccount,
    TAccountNftMint,
    TAccountUserNftAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? NFT_GIFTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    nftMint: { value: input.nftMint ?? null, isWritable: true },
    userNftAccount: { value: input.userNftAccount ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.userNftAccount.value) {
    accounts.userNftAccount.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.nftMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.nftMint),
      getAccountMeta(accounts.userNftAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintNftInstructionDataEncoder().encode({}),
  } as MintNftInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountConfig,
    TAccountTokenMint,
    TAccountUserTokenAccount,
    TAccountNftMint,
    TAccountUserNftAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type MintNftInput<
  TAccountUser extends string = string,
  TAccountConfig extends string = string,
  TAccountTokenMint extends string = string,
  TAccountUserTokenAccount extends string = string,
  TAccountNftMint extends string = string,
  TAccountUserNftAccount extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  user: TransactionSigner<TAccountUser>;
  config: Address<TAccountConfig>;
  tokenMint: Address<TAccountTokenMint>;
  userTokenAccount: Address<TAccountUserTokenAccount>;
  nftMint: Address<TAccountNftMint>;
  userNftAccount: Address<TAccountUserNftAccount>;
  tokenProgram: Address<TAccountTokenProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getMintNftInstruction<
  TAccountUser extends string,
  TAccountConfig extends string,
  TAccountTokenMint extends string,
  TAccountUserTokenAccount extends string,
  TAccountNftMint extends string,
  TAccountUserNftAccount extends string,
  TAccountTokenProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof NFT_GIFTER_PROGRAM_ADDRESS,
>(
  input: MintNftInput<
    TAccountUser,
    TAccountConfig,
    TAccountTokenMint,
    TAccountUserTokenAccount,
    TAccountNftMint,
    TAccountUserNftAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MintNftInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountConfig,
  TAccountTokenMint,
  TAccountUserTokenAccount,
  TAccountNftMint,
  TAccountUserNftAccount,
  TAccountTokenProgram,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? NFT_GIFTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    config: { value: input.config ?? null, isWritable: true },
    tokenMint: { value: input.tokenMint ?? null, isWritable: true },
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    nftMint: { value: input.nftMint ?? null, isWritable: true },
    userNftAccount: { value: input.userNftAccount ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.nftMint),
      getAccountMeta(accounts.userNftAccount),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getMintNftInstructionDataEncoder().encode({}),
  } as MintNftInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountConfig,
    TAccountTokenMint,
    TAccountUserTokenAccount,
    TAccountNftMint,
    TAccountUserNftAccount,
    TAccountTokenProgram,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedMintNftInstruction<
  TProgram extends string = typeof NFT_GIFTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    user: TAccountMetas[0];
    config: TAccountMetas[1];
    tokenMint: TAccountMetas[2];
    userTokenAccount: TAccountMetas[3];
    nftMint: TAccountMetas[4];
    userNftAccount: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
    associatedTokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: MintNftInstructionData;
};

export function parseMintNftInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMintNftInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      config: getNextAccount(),
      tokenMint: getNextAccount(),
      userTokenAccount: getNextAccount(),
      nftMint: getNextAccount(),
      userNftAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMintNftInstructionDataDecoder().decode(instruction.data),
  };
}
