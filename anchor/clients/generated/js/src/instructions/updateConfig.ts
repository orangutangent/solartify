/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { NFT_GIFTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_CONFIG_DISCRIMINATOR = new Uint8Array([
  29, 158, 252, 191, 10, 83, 219, 99,
]);

export function getUpdateConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_CONFIG_DISCRIMINATOR
  );
}

export type UpdateConfigInstruction<
  TProgram extends string = typeof NFT_GIFTER_PROGRAM_ADDRESS,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountConfig extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountConfig extends string
        ? WritableAccount<TAccountConfig>
        : TAccountConfig,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  purchasePriceLamports: bigint;
  claimPriceLamports: bigint;
  tokensPerClaim: bigint;
};

export type UpdateConfigInstructionDataArgs = {
  purchasePriceLamports: number | bigint;
  claimPriceLamports: number | bigint;
  tokensPerClaim: number | bigint;
};

export function getUpdateConfigInstructionDataEncoder(): Encoder<UpdateConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['purchasePriceLamports', getU64Encoder()],
      ['claimPriceLamports', getU64Encoder()],
      ['tokensPerClaim', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_CONFIG_DISCRIMINATOR })
  );
}

export function getUpdateConfigInstructionDataDecoder(): Decoder<UpdateConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['purchasePriceLamports', getU64Decoder()],
    ['claimPriceLamports', getU64Decoder()],
    ['tokensPerClaim', getU64Decoder()],
  ]);
}

export function getUpdateConfigInstructionDataCodec(): Codec<
  UpdateConfigInstructionDataArgs,
  UpdateConfigInstructionData
> {
  return combineCodec(
    getUpdateConfigInstructionDataEncoder(),
    getUpdateConfigInstructionDataDecoder()
  );
}

export type UpdateConfigInput<
  TAccountOwner extends string = string,
  TAccountConfig extends string = string,
> = {
  owner: TransactionSigner<TAccountOwner>;
  config: Address<TAccountConfig>;
  purchasePriceLamports: UpdateConfigInstructionDataArgs['purchasePriceLamports'];
  claimPriceLamports: UpdateConfigInstructionDataArgs['claimPriceLamports'];
  tokensPerClaim: UpdateConfigInstructionDataArgs['tokensPerClaim'];
};

export function getUpdateConfigInstruction<
  TAccountOwner extends string,
  TAccountConfig extends string,
  TProgramAddress extends Address = typeof NFT_GIFTER_PROGRAM_ADDRESS,
>(
  input: UpdateConfigInput<TAccountOwner, TAccountConfig>,
  config?: { programAddress?: TProgramAddress }
): UpdateConfigInstruction<TProgramAddress, TAccountOwner, TAccountConfig> {
  // Program address.
  const programAddress = config?.programAddress ?? NFT_GIFTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    owner: { value: input.owner ?? null, isWritable: false },
    config: { value: input.config ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.owner), getAccountMeta(accounts.config)],
    programAddress,
    data: getUpdateConfigInstructionDataEncoder().encode(
      args as UpdateConfigInstructionDataArgs
    ),
  } as UpdateConfigInstruction<TProgramAddress, TAccountOwner, TAccountConfig>;

  return instruction;
}

export type ParsedUpdateConfigInstruction<
  TProgram extends string = typeof NFT_GIFTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    owner: TAccountMetas[0];
    config: TAccountMetas[1];
  };
  data: UpdateConfigInstructionData;
};

export function parseUpdateConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedUpdateConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      owner: getNextAccount(),
      config: getNextAccount(),
    },
    data: getUpdateConfigInstructionDataDecoder().decode(instruction.data),
  };
}
