/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const USER_CLAIM_DATA_DISCRIMINATOR = new Uint8Array([
  214, 233, 149, 224, 175, 229, 124, 134,
]);

export function getUserClaimDataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USER_CLAIM_DATA_DISCRIMINATOR
  );
}

export type UserClaimData = {
  discriminator: ReadonlyUint8Array;
  /** Последний timestamp claim'а */
  lastClaimTs: bigint;
  /** bump PDA */
  bump: number;
};

export type UserClaimDataArgs = {
  /** Последний timestamp claim'а */
  lastClaimTs: number | bigint;
  /** bump PDA */
  bump: number;
};

export function getUserClaimDataEncoder(): Encoder<UserClaimDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lastClaimTs', getI64Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: USER_CLAIM_DATA_DISCRIMINATOR })
  );
}

export function getUserClaimDataDecoder(): Decoder<UserClaimData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lastClaimTs', getI64Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getUserClaimDataCodec(): Codec<
  UserClaimDataArgs,
  UserClaimData
> {
  return combineCodec(getUserClaimDataEncoder(), getUserClaimDataDecoder());
}

export function decodeUserClaimData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserClaimData, TAddress>;
export function decodeUserClaimData<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserClaimData, TAddress>;
export function decodeUserClaimData<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UserClaimData, TAddress> | MaybeAccount<UserClaimData, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserClaimDataDecoder()
  );
}

export async function fetchUserClaimData<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserClaimData, TAddress>> {
  const maybeAccount = await fetchMaybeUserClaimData(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserClaimData<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserClaimData, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserClaimData(maybeAccount);
}

export async function fetchAllUserClaimData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserClaimData>[]> {
  const maybeAccounts = await fetchAllMaybeUserClaimData(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserClaimData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserClaimData>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUserClaimData(maybeAccount));
}
