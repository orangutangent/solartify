/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { NFT_GIFTER_PROGRAM_ADDRESS } from '../programs';

/** NotOwner: Only the owner can perform this action */
export const NFT_GIFTER_ERROR__NOT_OWNER = 0x1770; // 6000
/** ClaimTooSoon: Claim not allowed yet. Please wait 24 hours since last claim */
export const NFT_GIFTER_ERROR__CLAIM_TOO_SOON = 0x1771; // 6001
/** MathOverflow: Math overflow */
export const NFT_GIFTER_ERROR__MATH_OVERFLOW = 0x1772; // 6002
/** InsufficientFunds: Insufficient funds sent */
export const NFT_GIFTER_ERROR__INSUFFICIENT_FUNDS = 0x1773; // 6003
/** InvalidConfig: Invalid or uninitialized config */
export const NFT_GIFTER_ERROR__INVALID_CONFIG = 0x1774; // 6004
/** TokenMintError: Token mint/burn error */
export const NFT_GIFTER_ERROR__TOKEN_MINT_ERROR = 0x1775; // 6005
/** MetadataError: Metadata creation error */
export const NFT_GIFTER_ERROR__METADATA_ERROR = 0x1776; // 6006
/** WithdrawError: Withdraw error */
export const NFT_GIFTER_ERROR__WITHDRAW_ERROR = 0x1777; // 6007
/** AlreadyClaimed: Already claimed in the last 24h */
export const NFT_GIFTER_ERROR__ALREADY_CLAIMED = 0x1778; // 6008
/** Unauthorized: Unauthorized */
export const NFT_GIFTER_ERROR__UNAUTHORIZED = 0x1779; // 6009
/** VaultNotFound: Vault account not found */
export const NFT_GIFTER_ERROR__VAULT_NOT_FOUND = 0x177a; // 6010
/** TokenTransferError: Token transfer error */
export const NFT_GIFTER_ERROR__TOKEN_TRANSFER_ERROR = 0x177b; // 6011

export type NftGifterError =
  | typeof NFT_GIFTER_ERROR__ALREADY_CLAIMED
  | typeof NFT_GIFTER_ERROR__CLAIM_TOO_SOON
  | typeof NFT_GIFTER_ERROR__INSUFFICIENT_FUNDS
  | typeof NFT_GIFTER_ERROR__INVALID_CONFIG
  | typeof NFT_GIFTER_ERROR__MATH_OVERFLOW
  | typeof NFT_GIFTER_ERROR__METADATA_ERROR
  | typeof NFT_GIFTER_ERROR__NOT_OWNER
  | typeof NFT_GIFTER_ERROR__TOKEN_MINT_ERROR
  | typeof NFT_GIFTER_ERROR__TOKEN_TRANSFER_ERROR
  | typeof NFT_GIFTER_ERROR__UNAUTHORIZED
  | typeof NFT_GIFTER_ERROR__VAULT_NOT_FOUND
  | typeof NFT_GIFTER_ERROR__WITHDRAW_ERROR;

let nftGifterErrorMessages: Record<NftGifterError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  nftGifterErrorMessages = {
    [NFT_GIFTER_ERROR__ALREADY_CLAIMED]: `Already claimed in the last 24h`,
    [NFT_GIFTER_ERROR__CLAIM_TOO_SOON]: `Claim not allowed yet. Please wait 24 hours since last claim`,
    [NFT_GIFTER_ERROR__INSUFFICIENT_FUNDS]: `Insufficient funds sent`,
    [NFT_GIFTER_ERROR__INVALID_CONFIG]: `Invalid or uninitialized config`,
    [NFT_GIFTER_ERROR__MATH_OVERFLOW]: `Math overflow`,
    [NFT_GIFTER_ERROR__METADATA_ERROR]: `Metadata creation error`,
    [NFT_GIFTER_ERROR__NOT_OWNER]: `Only the owner can perform this action`,
    [NFT_GIFTER_ERROR__TOKEN_MINT_ERROR]: `Token mint/burn error`,
    [NFT_GIFTER_ERROR__TOKEN_TRANSFER_ERROR]: `Token transfer error`,
    [NFT_GIFTER_ERROR__UNAUTHORIZED]: `Unauthorized`,
    [NFT_GIFTER_ERROR__VAULT_NOT_FOUND]: `Vault account not found`,
    [NFT_GIFTER_ERROR__WITHDRAW_ERROR]: `Withdraw error`,
  };
}

export function getNftGifterErrorMessage(code: NftGifterError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (nftGifterErrorMessages as Record<NftGifterError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isNftGifterError<TProgramErrorCode extends NftGifterError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    NFT_GIFTER_PROGRAM_ADDRESS,
    code
  );
}
