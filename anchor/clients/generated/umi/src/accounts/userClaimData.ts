/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  i64,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type UserClaimData = Account<UserClaimDataAccountData>;

export type UserClaimDataAccountData = {
  discriminator: Uint8Array;
  /** Последний timestamp claim'а */
  lastClaimTs: bigint;
  /** bump PDA */
  bump: number;
};

export type UserClaimDataAccountDataArgs = {
  /** Последний timestamp claim'а */
  lastClaimTs: number | bigint;
  /** bump PDA */
  bump: number;
};

export function getUserClaimDataAccountDataSerializer(): Serializer<
  UserClaimDataAccountDataArgs,
  UserClaimDataAccountData
> {
  return mapSerializer<
    UserClaimDataAccountDataArgs,
    any,
    UserClaimDataAccountData
  >(
    struct<UserClaimDataAccountData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['lastClaimTs', i64()],
        ['bump', u8()],
      ],
      { description: 'UserClaimDataAccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([214, 233, 149, 224, 175, 229, 124, 134]),
    })
  ) as Serializer<UserClaimDataAccountDataArgs, UserClaimDataAccountData>;
}

export function deserializeUserClaimData(
  rawAccount: RpcAccount
): UserClaimData {
  return deserializeAccount(
    rawAccount,
    getUserClaimDataAccountDataSerializer()
  );
}

export async function fetchUserClaimData(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<UserClaimData> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'UserClaimData');
  return deserializeUserClaimData(maybeAccount);
}

export async function safeFetchUserClaimData(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<UserClaimData | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeUserClaimData(maybeAccount) : null;
}

export async function fetchAllUserClaimData(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<UserClaimData[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'UserClaimData');
    return deserializeUserClaimData(maybeAccount);
  });
}

export async function safeFetchAllUserClaimData(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<UserClaimData[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeUserClaimData(maybeAccount as RpcAccount)
    );
}

export function getUserClaimDataGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'nftGifter',
    '5gm1Nn7N3BDn2og4Umw5JePUhLUF2azKqwJduQx3tApg'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Uint8Array;
      lastClaimTs: number | bigint;
      bump: number;
    }>({
      discriminator: [0, bytes({ size: 8 })],
      lastClaimTs: [8, i64()],
      bump: [16, u8()],
    })
    .deserializeUsing<UserClaimData>((account) =>
      deserializeUserClaimData(account)
    )
    .whereField(
      'discriminator',
      new Uint8Array([214, 233, 149, 224, 175, 229, 124, 134])
    );
}
