/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** NotOwner: Only the owner can perform this action */
export class NotOwnerError extends ProgramError {
  override readonly name: string = 'NotOwner';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Only the owner can perform this action', program, cause);
  }
}
codeToErrorMap.set(0x1770, NotOwnerError);
nameToErrorMap.set('NotOwner', NotOwnerError);

/** ClaimTooSoon: Claim not allowed yet. Please wait 24 hours since last claim */
export class ClaimTooSoonError extends ProgramError {
  override readonly name: string = 'ClaimTooSoon';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super(
      'Claim not allowed yet. Please wait 24 hours since last claim',
      program,
      cause
    );
  }
}
codeToErrorMap.set(0x1771, ClaimTooSoonError);
nameToErrorMap.set('ClaimTooSoon', ClaimTooSoonError);

/** MathOverflow: Math overflow */
export class MathOverflowError extends ProgramError {
  override readonly name: string = 'MathOverflow';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('Math overflow', program, cause);
  }
}
codeToErrorMap.set(0x1772, MathOverflowError);
nameToErrorMap.set('MathOverflow', MathOverflowError);

/** InsufficientFunds: Insufficient funds sent */
export class InsufficientFundsError extends ProgramError {
  override readonly name: string = 'InsufficientFunds';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('Insufficient funds sent', program, cause);
  }
}
codeToErrorMap.set(0x1773, InsufficientFundsError);
nameToErrorMap.set('InsufficientFunds', InsufficientFundsError);

/** InvalidConfig: Invalid or uninitialized config */
export class InvalidConfigError extends ProgramError {
  override readonly name: string = 'InvalidConfig';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('Invalid or uninitialized config', program, cause);
  }
}
codeToErrorMap.set(0x1774, InvalidConfigError);
nameToErrorMap.set('InvalidConfig', InvalidConfigError);

/** TokenMintError: Token mint/burn error */
export class TokenMintErrorError extends ProgramError {
  override readonly name: string = 'TokenMintError';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('Token mint/burn error', program, cause);
  }
}
codeToErrorMap.set(0x1775, TokenMintErrorError);
nameToErrorMap.set('TokenMintError', TokenMintErrorError);

/** MetadataError: Metadata creation error */
export class MetadataErrorError extends ProgramError {
  override readonly name: string = 'MetadataError';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('Metadata creation error', program, cause);
  }
}
codeToErrorMap.set(0x1776, MetadataErrorError);
nameToErrorMap.set('MetadataError', MetadataErrorError);

/** WithdrawError: Withdraw error */
export class WithdrawErrorError extends ProgramError {
  override readonly name: string = 'WithdrawError';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('Withdraw error', program, cause);
  }
}
codeToErrorMap.set(0x1777, WithdrawErrorError);
nameToErrorMap.set('WithdrawError', WithdrawErrorError);

/** AlreadyClaimed: Already claimed in the last 24h */
export class AlreadyClaimedError extends ProgramError {
  override readonly name: string = 'AlreadyClaimed';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('Already claimed in the last 24h', program, cause);
  }
}
codeToErrorMap.set(0x1778, AlreadyClaimedError);
nameToErrorMap.set('AlreadyClaimed', AlreadyClaimedError);

/** Unauthorized: Unauthorized */
export class UnauthorizedError extends ProgramError {
  override readonly name: string = 'Unauthorized';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('Unauthorized', program, cause);
  }
}
codeToErrorMap.set(0x1779, UnauthorizedError);
nameToErrorMap.set('Unauthorized', UnauthorizedError);

/** VaultNotFound: Vault account not found */
export class VaultNotFoundError extends ProgramError {
  override readonly name: string = 'VaultNotFound';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('Vault account not found', program, cause);
  }
}
codeToErrorMap.set(0x177a, VaultNotFoundError);
nameToErrorMap.set('VaultNotFound', VaultNotFoundError);

/** TokenTransferError: Token transfer error */
export class TokenTransferErrorError extends ProgramError {
  override readonly name: string = 'TokenTransferError';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('Token transfer error', program, cause);
  }
}
codeToErrorMap.set(0x177b, TokenTransferErrorError);
nameToErrorMap.set('TokenTransferError', TokenTransferErrorError);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getNftGifterErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getNftGifterErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
