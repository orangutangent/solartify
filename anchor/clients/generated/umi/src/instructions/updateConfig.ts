/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  bytes,
  mapSerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type UpdateConfigInstructionAccounts = {
  owner: Signer;
  config: PublicKey | Pda;
};

// Data.
export type UpdateConfigInstructionData = {
  discriminator: Uint8Array;
  purchasePriceLamports: bigint;
  claimPriceLamports: bigint;
  tokensPerClaim: bigint;
};

export type UpdateConfigInstructionDataArgs = {
  purchasePriceLamports: number | bigint;
  claimPriceLamports: number | bigint;
  tokensPerClaim: number | bigint;
};

export function getUpdateConfigInstructionDataSerializer(): Serializer<
  UpdateConfigInstructionDataArgs,
  UpdateConfigInstructionData
> {
  return mapSerializer<
    UpdateConfigInstructionDataArgs,
    any,
    UpdateConfigInstructionData
  >(
    struct<UpdateConfigInstructionData>(
      [
        ['discriminator', bytes({ size: 8 })],
        ['purchasePriceLamports', u64()],
        ['claimPriceLamports', u64()],
        ['tokensPerClaim', u64()],
      ],
      { description: 'UpdateConfigInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([29, 158, 252, 191, 10, 83, 219, 99]),
    })
  ) as Serializer<UpdateConfigInstructionDataArgs, UpdateConfigInstructionData>;
}

// Args.
export type UpdateConfigInstructionArgs = UpdateConfigInstructionDataArgs;

// Instruction.
export function updateConfig(
  context: Pick<Context, 'programs'>,
  input: UpdateConfigInstructionAccounts & UpdateConfigInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'nftGifter',
    '5gm1Nn7N3BDn2og4Umw5JePUhLUF2azKqwJduQx3tApg'
  );

  // Accounts.
  const resolvedAccounts = {
    owner: {
      index: 0,
      isWritable: false as boolean,
      value: input.owner ?? null,
    },
    config: {
      index: 1,
      isWritable: true as boolean,
      value: input.config ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: UpdateConfigInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getUpdateConfigInstructionDataSerializer().serialize(
    resolvedArgs as UpdateConfigInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
